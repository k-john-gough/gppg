//
//  This CSharp output file generated by Gardens Point LEX
//  Version:  1.1.1.298
//  Machine:  JOHNS_NETBOOK
//  DateTime: 7/12/2009 8:58:20 AM
//  UserName: john
//  GPLEX input file <gppg.lex>
//  GPLEX frame file <embedded resource>
//
//  Option settings: verbose, parser, stack, minimize
//  Option settings: compressNext, persistBuffer, noEmbedBuffers
//

//
// Experimental embedded frame
// Version 1.1.0 of 11-February-2009
//
//
#define BACKUP
#define LEFTANCHORS
#define STACK
#define PERSIST
#define BYTEMODE

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.GplexBuffers;
using System.Collections;
using QUT.GPGen.Parser;

namespace QUT.GPGen.Lexers
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Token
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     internal sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Token).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 87;
        const int initial = 88;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int TheRules = 1;
        const int TheEpilog = 2;
        const int GetPath = 3;
        const int Prolog = 4;
        const int Action = 5;
        const int Comment = 6;
        const int CodeBlock = 7;
        const int ShouldBeBlank = 8;

#region user code
/* gppg.lex: Author: John Gough, August 2008 */
/* --------------------------- */
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {88, 107, 125, 128, 125, 134, 
        61, 135, 141, 0};

   static int[] anchorState = new int[] {89, 108, 125, 128, 133, 134, 
        61, 136, 141, 0};

    static Table[] NxS = new Table[142] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ new Table(0, 0, -1, null), // Shortest string "\x01"
/* NxS[   2] */ // Shortest string "\""
      new Table(0, 93, 105, new short[] {-1, 105, 105, 105, 105, 105, 
          105, -1, -1, -1, 19, -1, -1, 19, 105, 105, 105, 105, 105, 105, 105, 105, 
          105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 20, 105, 105, 105, 
          105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 
          105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 
          105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 
          105, 105, 105, 105, 105, 105, 106}),
/* NxS[   3] */ // Shortest string "^%"
      new Table(9, 117, 14, new short[] {-1, -1, 14, 14, -1, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, -1, 14, 14, 14, 14, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 14, 14, 14, 
          16, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 14, 18}),
/* NxS[   4] */ // Shortest string "'"
      new Table(0, 93, 91, new short[] {-1, 91, 91, 91, 91, 91, 
          91, -1, -1, -1, -1, -1, -1, -1, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, -1, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 92}),
/* NxS[   5] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[   6] */ // Shortest string "/"
      new Table(42, 6, -1, new short[] {11, -1, -1, -1, -1, 12}),
/* NxS[   7] */ // Shortest string "0"
      new Table(48, 73, -1, new short[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 90}),
/* NxS[   8] */ // Shortest string "1"
      new Table(48, 10, -1, new short[] {8, 8, 8, 8, 8, 8, 
          8, 8, 8, 8}),
/* NxS[   9] */ // Shortest string "A"
      new Table(48, 75, -1, new short[] {9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, -1, -1, -1, -1, 9, -1, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9}),
/* NxS[  10] */ // Shortest string "0x0"
      new Table(48, 55, -1, new short[] {10, 10, 10, 10, 10, 10, 
          10, 10, 10, 10, -1, -1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 
          10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 
          10}),
/* NxS[  11] */ new Table(0, 0, -1, null), // Shortest string "/*"
/* NxS[  12] */ // Shortest string "//"
      new Table(10, 4, 12, new short[] {-1, 12, 12, -1}),
/* NxS[  13] */ new Table(0, 0, -1, null), // Shortest string "'\x01'"
/* NxS[  14] */ new Table(0, 0, -1, null), // Shortest string "%\x01"
/* NxS[  15] */ new Table(0, 0, -1, null), // Shortest string "^%%"
/* NxS[  16] */ // Shortest string "^%A"
      new Table(48, 75, -1, new short[] {16, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16, -1, -1, -1, -1, 16, -1, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
          16, 16, 16, 16, 16}),
/* NxS[  17] */ new Table(0, 0, -1, null), // Shortest string "^%{"
/* NxS[  18] */ new Table(0, 0, -1, null), // Shortest string "^%}"
/* NxS[  19] */ new Table(0, 0, -1, null), // Shortest string "\"\n"
/* NxS[  20] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[  21] */ // Shortest string "%"
      new Table(9, 114, 14, new short[] {-1, -1, 14, 14, -1, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 
          22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 14, 14, 14, 14, 
          22, 14, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 
          22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22}),
/* NxS[  22] */ // Shortest string "%A"
      new Table(48, 75, -1, new short[] {22, 22, 22, 22, 22, 22, 
          22, 22, 22, 22, -1, -1, -1, -1, -1, -1, -1, 22, 22, 22, 22, 22, 
          22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 
          22, 22, 22, 22, 22, -1, -1, -1, -1, 22, -1, 22, 22, 22, 22, 22, 
          22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 
          22, 22, 22, 22, 22}),
/* NxS[  23] */ // Shortest string "\""
      new Table(0, 93, 123, new short[] {-1, 123, 123, 123, 123, 123, 
          123, -1, -1, -1, 19, -1, -1, 19, 123, 123, 123, 123, 123, 123, 123, 123, 
          123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 32, 123, 123, 123, 
          123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 
          123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 
          123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 
          123, 123, 123, 123, 123, 123, 124}),
/* NxS[  24] */ // Shortest string "^%"
      new Table(9, 117, 14, new short[] {-1, -1, 14, 14, -1, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, -1, 14, 14, 14, 14, 30, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 14, 14, 14, 14, 
          31, 14, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 14, 14, 18}),
/* NxS[  25] */ // Shortest string "'"
      new Table(0, 93, 109, new short[] {-1, 109, 109, 109, 109, 109, 
          109, -1, -1, -1, -1, -1, -1, -1, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, -1, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, 109, 109, 109, 109, 109, 110}),
/* NxS[  26] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  27] */ // Shortest string "^A"
      new Table(48, 75, -1, new short[] {27, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, -1, -1, -1, -1, -1, -1, -1, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, 27, -1, -1, -1, -1, 27, -1, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, 27}),
/* NxS[  28] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  29] */ new Table(0, 0, -1, null), // Shortest string "'\x01'"
/* NxS[  30] */ new Table(0, 0, -1, null), // Shortest string "^%%"
/* NxS[  31] */ // Shortest string "%A"
      new Table(48, 75, -1, new short[] {31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, -1, -1, -1, -1, -1, -1, -1, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, -1, -1, -1, -1, 31, -1, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31}),
/* NxS[  32] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[  33] */ // Shortest string "%"
      new Table(9, 114, 14, new short[] {-1, -1, 14, 14, -1, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 14, 14, 14, 14, 
          31, 14, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
          31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31}),
/* NxS[  34] */ // Shortest string "A"
      new Table(48, 75, -1, new short[] {34, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34, -1, -1, -1, -1, 34, -1, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34}),
/* NxS[  35] */ new Table(0, 0, -1, null), // Shortest string "\x01"
/* NxS[  36] */ // Shortest string "\""
      new Table(0, 93, 126, new short[] {-1, 126, 126, 126, 126, 126, 
          126, -1, -1, -1, 19, -1, -1, 19, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, -1, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 127}),
/* NxS[  37] */ // Shortest string "%"
      new Table(9, 24, 14, new short[] {-1, -1, 14, 14, -1, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, -1}),
/* NxS[  38] */ // Shortest string "/"
      new Table(42, 6, -1, new short[] {39, -1, -1, -1, -1, 40}),
/* NxS[  39] */ new Table(0, 0, -1, null), // Shortest string "/*"
/* NxS[  40] */ // Shortest string "//"
      new Table(10, 4, 40, new short[] {-1, 40, 40, -1}),
/* NxS[  41] */ // Shortest string "\x01"
      new Table(9, 24, 41, new short[] {-1, -1, 41, 41, -1, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          41, -1}),
/* NxS[  42] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[  43] */ // Shortest string "\r"
      new Table(10, 1, -1, new short[] {42}),
/* NxS[  44] */ // Shortest string "\""
      new Table(0, 93, 44, new short[] {41, 44, 44, 44, 44, 44, 
          44, 41, 41, -1, 19, 41, 41, 19, 44, 44, 44, 44, 44, 44, 44, 44, 
          44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 131, 44, 55, 44, 44, 44, 
          44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
          44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
          44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
          44, 44, 44, 44, 44, 44, 56}),
/* NxS[  45] */ // Shortest string "/"
      new Table(9, 39, 41, new short[] {-1, -1, 41, 41, -1, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          41, -1, 41, 41, 41, 41, 41, 41, 41, 41, 41, 54, 41, 41, 41, 41, 
          12}),
/* NxS[  46] */ // Shortest string "="
      new Table(9, 24, 46, new short[] {-1, -1, 46, 46, -1, 46, 
          46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
          46, -1}),
/* NxS[  47] */ // Shortest string "@"
      new Table(9, 26, 41, new short[] {-1, -1, 41, 41, -1, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          41, -1, 41, 48}),
/* NxS[  48] */ // Shortest string "@\""
      new Table(9, 84, 48, new short[] {129, 129, 48, 48, 129, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 129, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50}),
/* NxS[  49] */ // Shortest string "@\"\""
      new Table(9, 24, 41, new short[] {-1, -1, 41, 41, -1, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          41, -1}),
/* NxS[  50] */ // Shortest string "@\"\\"
      new Table(9, 84, 48, new short[] {129, 129, 48, 48, 129, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 129, 48, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50}),
/* NxS[  51] */ // Shortest string "@\"\\\""
      new Table(9, 84, 48, new short[] {129, 129, 48, 48, 129, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 129, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
          48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50}),
/* NxS[  52] */ new Table(0, 0, -1, null), // Shortest string "@\"\t\""
/* NxS[  53] */ // Shortest string "@\"\t\\\""
      new Table(34, 59, 129, new short[] {52, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 130}),
/* NxS[  54] */ // Shortest string "/*"
      new Table(9, 24, 41, new short[] {-1, -1, 41, 41, -1, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          41, -1}),
/* NxS[  55] */ // Shortest string "\"\""
      new Table(9, 24, 41, new short[] {-1, -1, 41, 41, -1, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          41, -1}),
/* NxS[  56] */ // Shortest string "\"\\"
      new Table(9, 24, 44, new short[] {131, -1, 44, 44, -1, 44, 
          44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
          44, 131}),
/* NxS[  57] */ new Table(0, 0, -1, null), // Shortest string "\"\x20\""
/* NxS[  58] */ // Shortest string "^%"
      new Table(9, 117, 14, new short[] {-1, -1, 14, 14, -1, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 59}),
/* NxS[  59] */ new Table(0, 0, -1, null), // Shortest string "^%}"
/* NxS[  60] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  61] */ // Shortest string ""
      new Table(10, 33, 62, new short[] {-1, 62, 62, -1, 62, 62, 
          62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
          62, 62, 63, 62, 62, 64, 62, 62, 62, 62, 65}),
/* NxS[  62] */ // Shortest string "\x01"
      new Table(10, 33, 62, new short[] {-1, 62, 62, -1, 62, 62, 
          62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, 62, 62, 62, 62, 62, 62, -1}),
/* NxS[  63] */ // Shortest string "\""
      new Table(0, 93, 63, new short[] {62, 63, 63, 63, 63, 63, 
          63, 62, 62, 62, 19, 62, 62, 19, 63, 63, 63, 63, 63, 63, 63, 63, 
          63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 62, 63, 63, 63, 
          63, 63, 63, 63, 126, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
          63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
          63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
          63, 63, 63, 63, 63, 63, 67}),
/* NxS[  64] */ // Shortest string "%"
      new Table(10, 33, 62, new short[] {-1, 62, 62, -1, 62, 62, 
          62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
          62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 14}),
/* NxS[  65] */ // Shortest string "*"
      new Table(47, 1, -1, new short[] {66}),
/* NxS[  66] */ new Table(0, 0, -1, null), // Shortest string "*/"
/* NxS[  67] */ // Shortest string "\"\\"
      new Table(10, 33, 63, new short[] {-1, 63, 63, -1, 63, 63, 
          63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
          63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 126}),
/* NxS[  68] */ // Shortest string "\x01"
      new Table(34, 92, 68, new short[] {-1, 68, 68, -1, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, -1, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, -1, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, -1, 68, -1}),
/* NxS[  69] */ // Shortest string "\""
      new Table(0, 93, 69, new short[] {-1, 69, 69, 69, 69, 69, 
          69, -1, -1, -1, 19, -1, -1, 19, 69, 69, 69, 69, 69, 69, 69, 69, 
          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 76, 69, 69, 69, 
          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
          69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
          69, 69, 69, 69, 69, 69, 140}),
/* NxS[  70] */ // Shortest string "^%"
      new Table(34, 92, 68, new short[] {14, 68, 68, 79, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 14, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 14, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 14, 68, 80}),
/* NxS[  71] */ // Shortest string "'"
      new Table(34, 92, 68, new short[] {139, 68, 68, 139, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 139, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 139, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 78, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 139, 68, 139}),
/* NxS[  72] */ // Shortest string "/"
      new Table(42, 6, -1, new short[] {11, -1, -1, -1, -1, 12}),
/* NxS[  73] */ // Shortest string "@"
      new Table(34, 1, -1, new short[] {137}),
/* NxS[  74] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  75] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  76] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[  77] */ // Shortest string "@\"\\\""
      new Table(34, 59, 137, new short[] {76, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 138}),
/* NxS[  78] */ // Shortest string "'\\"
      new Table(34, 92, 68, new short[] {139, 68, 68, 139, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 139, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 139, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 139, 68, 139}),
/* NxS[  79] */ new Table(0, 0, -1, null), // Shortest string "^%%"
/* NxS[  80] */ new Table(0, 0, -1, null), // Shortest string "^%}"
/* NxS[  81] */ // Shortest string "%"
      new Table(34, 92, 68, new short[] {14, 68, 68, 14, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 14, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 14, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 14, 68, 14}),
/* NxS[  82] */ new Table(0, 0, -1, null), // Shortest string "\x01"
/* NxS[  83] */ new Table(0, 0, -1, null), // Shortest string "\n"
/* NxS[  84] */ // Shortest string "\r"
      new Table(10, 1, -1, new short[] {83}),
/* NxS[  85] */ // Shortest string "\""
      new Table(0, 93, 126, new short[] {-1, 126, 126, 126, 126, 126, 
          126, -1, -1, -1, 19, -1, -1, 19, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, -1, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 127}),
/* NxS[  86] */ // Shortest string "%"
      new Table(9, 24, 14, new short[] {-1, -1, 14, 14, -1, 14, 
          14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
          14, -1}),
/* NxS[  87] */ // Shortest string "/"
      new Table(42, 6, -1, new short[] {11, -1, -1, -1, -1, 12}),
/* NxS[  88] */ // Shortest string ""
      new Table(9, 117, 1, new short[] {-1, -1, 1, 1, -1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 1, 2, 1, 1, 21, 1, 4, 1, 1, 1, 1, 5, 1, 5, 
          6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 1, 5, 
          1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 1, 5, 1, 
          9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5}),
/* NxS[  89] */ // Shortest string "^"
      new Table(9, 117, 1, new short[] {-1, -1, 1, 1, -1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 1, 2, 1, 1, 3, 1, 4, 1, 1, 1, 1, 5, 1, 5, 
          6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 1, 5, 
          1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 1, 5, 1, 
          9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
          9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5}),
/* NxS[  90] */ // Shortest string "0x"
      new Table(48, 55, -1, new short[] {10, 10, 10, 10, 10, 10, 
          10, 10, 10, 10, -1, -1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 
          10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 
          10}),
/* NxS[  91] */ // Shortest string "'\x01"
      new Table(39, 1, -1, new short[] {13}),
/* NxS[  92] */ // Shortest string "'\\"
      new Table(10, 111, 91, new short[] {-1, 91, 91, -1, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          93, 93, 93, 93, 93, 93, 93, 93, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 94, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, 91, 95, 91, 91, 96}),
/* NxS[  93] */ // Shortest string "'\\0"
      new Table(39, 17, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, -1, -1, 104, 104, 104, 104, 104, 104, 104, 104}),
/* NxS[  94] */ // Shortest string "'\\U"
      new Table(39, 64, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, -1, -1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, -1, -1, -1, 
          -1, -1, -1, -1, 100, 100, 100, 100, 100, 100, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 100, 100, 100, 100, 100, 100}),
/* NxS[  95] */ // Shortest string "'\\u"
      new Table(39, 64, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, -1, -1, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, -1, -1, -1, 
          -1, -1, -1, -1, 98, 98, 98, 98, 98, 98, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 98, 98, 98, 98, 98, 98}),
/* NxS[  96] */ // Shortest string "'\\x"
      new Table(39, 64, -1, new short[] {13, -1, -1, -1, -1, -1, 
          -1, -1, -1, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, -1, -1, -1, 
          -1, -1, -1, -1, 97, 97, 97, 97, 97, 97, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 97, 97, 97, 97, 97, 97}),
/* NxS[  97] */ // Shortest string "'\\x0"
      new Table(48, 55, -1, new short[] {91, 91, 91, 91, 91, 91, 
          91, 91, 91, 91, -1, -1, -1, -1, -1, -1, -1, 91, 91, 91, 91, 91, 
          91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, 91, 91, 91, 91, 
          91}),
/* NxS[  98] */ // Shortest string "'\\u0"
      new Table(48, 55, -1, new short[] {99, 99, 99, 99, 99, 99, 
          99, 99, 99, 99, -1, -1, -1, -1, -1, -1, -1, 99, 99, 99, 99, 99, 
          99, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, 99, 99, 99, 99, 
          99}),
/* NxS[  99] */ // Shortest string "'\\u00"
      new Table(48, 55, -1, new short[] {97, 97, 97, 97, 97, 97, 
          97, 97, 97, 97, -1, -1, -1, -1, -1, -1, -1, 97, 97, 97, 97, 97, 
          97, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, 97, 97, 97, 97, 
          97}),
/* NxS[ 100] */ // Shortest string "'\\U0"
      new Table(48, 55, -1, new short[] {101, 101, 101, 101, 101, 101, 
          101, 101, 101, 101, -1, -1, -1, -1, -1, -1, -1, 101, 101, 101, 101, 101, 
          101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 101, 101, 101, 101, 101, 
          101}),
/* NxS[ 101] */ // Shortest string "'\\U00"
      new Table(48, 55, -1, new short[] {102, 102, 102, 102, 102, 102, 
          102, 102, 102, 102, -1, -1, -1, -1, -1, -1, -1, 102, 102, 102, 102, 102, 
          102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 102, 102, 102, 102, 102, 
          102}),
/* NxS[ 102] */ // Shortest string "'\\U000"
      new Table(48, 55, -1, new short[] {103, 103, 103, 103, 103, 103, 
          103, 103, 103, 103, -1, -1, -1, -1, -1, -1, -1, 103, 103, 103, 103, 103, 
          103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 103, 103, 103, 103, 103, 
          103}),
/* NxS[ 103] */ // Shortest string "'\\U0000"
      new Table(48, 55, -1, new short[] {98, 98, 98, 98, 98, 98, 
          98, 98, 98, 98, -1, -1, -1, -1, -1, -1, -1, 98, 98, 98, 98, 98, 
          98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 98, 98, 98, 98, 98, 
          98}),
/* NxS[ 104] */ // Shortest string "'\\00"
      new Table(48, 8, -1, new short[] {91, 91, 91, 91, 91, 91, 
          91, 91}),
/* NxS[ 105] */ // Shortest string "\"\x01"
      new Table(0, 93, 105, new short[] {-1, 105, 105, 105, 105, 105, 
          105, -1, -1, -1, 19, -1, -1, 19, 105, 105, 105, 105, 105, 105, 105, 105, 
          105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 20, 105, 105, 105, 
          105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 
          105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 
          105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 
          105, 105, 105, 105, 105, 105, 106}),
/* NxS[ 106] */ // Shortest string "\"\\"
      new Table(10, 4, 105, new short[] {-1, 105, 105, -1}),
/* NxS[ 107] */ // Shortest string ""
      new Table(9, 117, 1, new short[] {-1, -1, 1, 1, -1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 1, 23, 1, 1, 33, 1, 25, 1, 1, 1, 1, 26, 1, 26, 
          6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 26, 26, 26, 1, 26, 
          1, 1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 26, 1, 26, 1, 
          34, 1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
          34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 28, 26, 26}),
/* NxS[ 108] */ // Shortest string "^"
      new Table(9, 117, 1, new short[] {-1, -1, 1, 1, -1, 1, 
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
          1, -1, 1, 23, 1, 1, 24, 1, 25, 1, 1, 1, 1, 26, 1, 26, 
          6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 26, 26, 26, 1, 26, 
          1, 1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 26, 1, 26, 1, 
          27, 1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
          27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 26, 26}),
/* NxS[ 109] */ // Shortest string "'\x01"
      new Table(39, 1, -1, new short[] {29}),
/* NxS[ 110] */ // Shortest string "'\\"
      new Table(10, 111, 109, new short[] {-1, 109, 109, -1, 109, 109, 
          109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
          111, 111, 111, 111, 111, 111, 111, 111, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, 109, 109, 109, 109, 112, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 
          109, 109, 109, 109, 109, 113, 109, 109, 114}),
/* NxS[ 111] */ // Shortest string "'\\0"
      new Table(39, 17, -1, new short[] {29, -1, -1, -1, -1, -1, 
          -1, -1, -1, 122, 122, 122, 122, 122, 122, 122, 122}),
/* NxS[ 112] */ // Shortest string "'\\U"
      new Table(39, 64, -1, new short[] {29, -1, -1, -1, -1, -1, 
          -1, -1, -1, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, -1, -1, -1, 
          -1, -1, -1, -1, 118, 118, 118, 118, 118, 118, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 118, 118, 118, 118, 118, 118}),
/* NxS[ 113] */ // Shortest string "'\\u"
      new Table(39, 64, -1, new short[] {29, -1, -1, -1, -1, -1, 
          -1, -1, -1, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, -1, -1, -1, 
          -1, -1, -1, -1, 116, 116, 116, 116, 116, 116, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 116, 116, 116, 116, 116, 116}),
/* NxS[ 114] */ // Shortest string "'\\x"
      new Table(39, 64, -1, new short[] {29, -1, -1, -1, -1, -1, 
          -1, -1, -1, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, -1, -1, -1, 
          -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 115, 115, 115, 115, 115, 115}),
/* NxS[ 115] */ // Shortest string "'\\x0"
      new Table(48, 55, -1, new short[] {109, 109, 109, 109, 109, 109, 
          109, 109, 109, 109, -1, -1, -1, -1, -1, -1, -1, 109, 109, 109, 109, 109, 
          109, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 109, 109, 109, 109, 109, 
          109}),
/* NxS[ 116] */ // Shortest string "'\\u0"
      new Table(48, 55, -1, new short[] {117, 117, 117, 117, 117, 117, 
          117, 117, 117, 117, -1, -1, -1, -1, -1, -1, -1, 117, 117, 117, 117, 117, 
          117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 117, 117, 117, 117, 117, 
          117}),
/* NxS[ 117] */ // Shortest string "'\\u00"
      new Table(48, 55, -1, new short[] {115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, -1, -1, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 
          115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 
          115}),
/* NxS[ 118] */ // Shortest string "'\\U0"
      new Table(48, 55, -1, new short[] {119, 119, 119, 119, 119, 119, 
          119, 119, 119, 119, -1, -1, -1, -1, -1, -1, -1, 119, 119, 119, 119, 119, 
          119, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 119, 119, 119, 119, 119, 
          119}),
/* NxS[ 119] */ // Shortest string "'\\U00"
      new Table(48, 55, -1, new short[] {120, 120, 120, 120, 120, 120, 
          120, 120, 120, 120, -1, -1, -1, -1, -1, -1, -1, 120, 120, 120, 120, 120, 
          120, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 120, 120, 120, 120, 120, 
          120}),
/* NxS[ 120] */ // Shortest string "'\\U000"
      new Table(48, 55, -1, new short[] {121, 121, 121, 121, 121, 121, 
          121, 121, 121, 121, -1, -1, -1, -1, -1, -1, -1, 121, 121, 121, 121, 121, 
          121, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 121, 121, 121, 121, 121, 
          121}),
/* NxS[ 121] */ // Shortest string "'\\U0000"
      new Table(48, 55, -1, new short[] {116, 116, 116, 116, 116, 116, 
          116, 116, 116, 116, -1, -1, -1, -1, -1, -1, -1, 116, 116, 116, 116, 116, 
          116, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 116, 116, 116, 116, 116, 
          116}),
/* NxS[ 122] */ // Shortest string "'\\00"
      new Table(48, 8, -1, new short[] {109, 109, 109, 109, 109, 109, 
          109, 109}),
/* NxS[ 123] */ // Shortest string "\"\x01"
      new Table(0, 93, 123, new short[] {-1, 123, 123, 123, 123, 123, 
          123, -1, -1, -1, 19, -1, -1, 19, 123, 123, 123, 123, 123, 123, 123, 123, 
          123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 32, 123, 123, 123, 
          123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 
          123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 
          123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 
          123, 123, 123, 123, 123, 123, 124}),
/* NxS[ 124] */ // Shortest string "\"\\"
      new Table(10, 4, 123, new short[] {-1, 123, 123, -1}),
/* NxS[ 125] */ // Shortest string ""
      new Table(10, 38, 35, new short[] {-1, 35, 35, 35, 35, 35, 
          35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
          35, 35, 36, 35, 35, 37, 35, 35, 35, 35, 35, 35, 35, 35, 35, 38}),
/* NxS[ 126] */ // Shortest string "\"\x01"
      new Table(0, 93, 126, new short[] {-1, 126, 126, 126, 126, 126, 
          126, -1, -1, -1, 19, -1, -1, 19, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, -1, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
          126, 126, 126, 126, 126, 126, 127}),
/* NxS[ 127] */ // Shortest string "\"\\"
      new Table(10, 4, 126, new short[] {-1, 126, 126, -1}),
/* NxS[ 128] */ // Shortest string ""
      new Table(9, 56, 41, new short[] {-1, 42, 41, 41, 43, 41, 
          41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          41, -1, 41, 44, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 
          45, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 46, 41, 
          41, 47}),
/* NxS[ 129] */ // Shortest string "@\"\t"
      new Table(34, 59, 129, new short[] {52, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 130}),
/* NxS[ 130] */ // Shortest string "@\"\t\\"
      new Table(34, 59, 129, new short[] {53, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 
          129, 129, 129, 129, 130}),
/* NxS[ 131] */ // Shortest string "\"\x20"
      new Table(0, 93, 131, new short[] {-1, 131, 131, 131, 131, 131, 
          131, -1, -1, -1, 19, -1, -1, 19, 131, 131, 131, 131, 131, 131, 131, 131, 
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 57, 131, 131, 131, 
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 
          131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 
          131, 131, 131, 131, 131, 131, 132}),
/* NxS[ 132] */ // Shortest string "\"\x20\\"
      new Table(10, 4, 131, new short[] {-1, 131, 131, -1}),
/* NxS[ 133] */ // Shortest string "^"
      new Table(10, 38, 35, new short[] {-1, 35, 35, 35, 35, 35, 
          35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
          35, 35, 36, 35, 35, 58, 35, 35, 35, 35, 35, 35, 35, 35, 35, 38}),
/* NxS[ 134] */ // Shortest string ""
      new Table(10, 116, 35, new short[] {-1, 35, 35, 35, 35, 35, 
          35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
          35, 35, 36, 35, 35, 37, 35, 35, 35, 35, 35, 35, 35, 35, 35, 38, 
          35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
          35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
          35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
          35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
          35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 60}),
/* NxS[ 135] */ // Shortest string ""
      new Table(34, 92, 68, new short[] {69, 68, 68, 81, 68, 71, 
          68, 68, 68, 68, 68, 68, 68, 72, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 73, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 74, 68, 75}),
/* NxS[ 136] */ // Shortest string "^"
      new Table(34, 92, 68, new short[] {69, 68, 68, 70, 68, 71, 
          68, 68, 68, 68, 68, 68, 68, 72, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 73, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
          68, 68, 68, 74, 68, 75}),
/* NxS[ 137] */ // Shortest string "@\""
      new Table(34, 59, 137, new short[] {76, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 138}),
/* NxS[ 138] */ // Shortest string "@\"\\"
      new Table(34, 59, 137, new short[] {77, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 
          137, 137, 137, 137, 138}),
/* NxS[ 139] */ // Shortest string "'\""
      new Table(39, 1, -1, new short[] {76}),
/* NxS[ 140] */ // Shortest string "\"\\"
      new Table(10, 4, 69, new short[] {-1, 69, 69, -1}),
/* NxS[ 141] */ // Shortest string ""
      new Table(9, 39, 82, new short[] {-1, 83, 82, 82, 84, 82, 
          82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 
          82, -1, 82, 85, 82, 82, 86, 82, 82, 82, 82, 82, 82, 82, 82, 82, 
          87}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = (byte)(code - NxS[state].min);
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     internal Scanner(Stream file) {
            SetSource(file); // no unicode option
        }
        
#endif // !NOFILES

     internal Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + (code & 0x3FF << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

#if !NOFILES        
        // ================ LineBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Token next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Token)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get
            {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
                {
                    int ch;
                    int count = 0;
                    buffer.Pos = tokPos;
                    do
                    {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile); 
                    return count;
                }
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
// User-specified prolog to scan()
LexSpan comStart = null;
    LexSpan errStart = null;
    LexSpan errEnd   = null;
    int braceNestingLevel = 0;
// End, user-specified prolog
            try {
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    Result rslt = Result.noMatch;
#endif // BACKUP
#if LEFTANCHORS
                    for (;;)
                    {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) 
                            break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart)
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();
                    
                    while ((next = NextState()) > eofNum) // Exit for goStart AND for eofNum
#if BACKUP
                        if (state <= maxAccept && next > maxAccept) // need to prepare backup data
                        {
                            // ctx is an object. The fields may be 
                            // mutated by the call to Recurse2.
                            // On return the data in ctx is the
                            // *latest* accept state that was found.
                            
                            rslt = Recurse2(ref ctx, next);
                            if (rslt == Result.noMatch) 
                                RestoreStateAndPos(ref ctx);
                            break;
                        }
                        else
#endif // BACKUP
                        {
                            state = next;
                            GetCode();
                        }
                    if (state <= maxAccept) 
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162
    switch (state)
    {
        case eofNum:
            switch (currentStart) {
                case 125:
yy_pop_state(); yyless(0);
                    break;
                case 61:
Error(53, comStart); /* This comment is unterminated */
                    break;
                case 135:
if (braceNestingLevel != 0)
                                  Error(55, TokenSpan()); 
                              yy_pop_state(); 
                              yyless(0); 
                              return (int)Token.codeEnd;
                    break;
            }
            if (yywrap())
                return (int)Token.EOF;
            break;
        case 1: // Recognized '{NotWh}',	Shortest string "\x01"
        case 2: // Recognized '{NotWh}',	Shortest string "\""
        case 3: // Recognized '{NotWh}',	Shortest string "^%"
        case 4: // Recognized '{NotWh}',	Shortest string "'"
        case 6: // Recognized '{NotWh}',	Shortest string "/"
        case 21: // Recognized '{NotWh}',	Shortest string "%"
        case 23: // In <TheRules> Recognized '{NotWh}',	Shortest string "\""
        case 24: // In <TheRules> Recognized '{NotWh}',	Shortest string "^%"
        case 33: // In <TheRules> Recognized '{NotWh}',	Shortest string "%"
Error(57, TokenSpan());
            break;
        case 5: // Recognized '{OpChars}',	Shortest string ","
return (int)(yytext[0]);
            break;
        case 7: // Recognized '{Number}',	Shortest string "0"
        case 8: // Recognized '{Number}',	Shortest string "1"
yylval.iVal = ParseDecimal(yytext); return (int)Token.number;
            break;
        case 9: // Recognized '{Ident}',	Shortest string "A"
return (int)Token.ident;
            break;
        case 10: // Recognized '{HexNumber}',	Shortest string "0x0"
yylval.iVal = ParseHexaDec(yytext); return (int)Token.number;
            break;
        case 11: // Recognized '{CmntStrt}',	Shortest string "/*"
        case 54: // In <GetPath> Recognized '{CmntStrt}',	Shortest string "/*"
yy_push_state(Comment); 
                              comStart = TokenSpan(); 
                              /* And no token returned */
            break;
        case 12: // Recognized '{OneLineCmnt}',	Shortest string "//"
/* skip */
            break;
        case 13: // Recognized '{LitChr}',	Shortest string "'\x01'"
return (int)Token.litchar;
            break;
        case 14: // Recognized '%{NotWh}',	Shortest string "%\x01"
Error(50, TokenSpan());
            break;
        case 15: // Recognized '^%%',	Shortest string "^%%"
yy_clear_stack();
                              BEGIN(TheRules); 
                              yy_push_state(ShouldBeBlank); errStart = null;
                              return (int)Token.kwPCPC;
            break;
        case 16: // Recognized '^%{Ident}',	Shortest string "^%A"
{
                                  Token kWord = GetKeyword(yytext); 
                                  if (kWord == Token.kwOutput)
                                      BEGIN(GetPath);
                                  return (int)kWord;
                              }
            break;
        case 17: // Recognized '^%\{',	Shortest string "^%{"
yy_push_state(Prolog); 
                              yy_push_state(ShouldBeBlank); errStart = null;
                              return (int)Token.kwLbrace;
            break;
        case 18: // Recognized '^%\}',	Shortest string "^%}"
return (int)Token.kwRbrace; /* But a syntax error! */
            break;
        case 19: // Recognized '{BadStr}/[\r\n]',	Shortest string "\"\n"
_yytrunc(1); 
Error(58, TokenSpan());
            break;
        case 20: // Recognized '{LitStr}',	Shortest string "\"\""
return (int)Token.litstring;
            break;
        case 22: // Recognized '\%{Ident}',	Shortest string "%A"
{   // An error, but attempt recovery
                                  Token kWord = GetKeyword(yytext); 
                                  if (kWord != Token.errTok)
                                      Error(59, TokenSpan());
                                  if (kWord == Token.kwOutput)
                                      BEGIN(GetPath);
                                  return (int)kWord;
                              }
            break;
        case 25: // In <TheRules> Recognized '\'',	Shortest string "'"
Error(58, TokenSpan());
            break;
        case 26: // In <TheRules> Recognized '{OpChars}',	Shortest string ","
return (int)(yytext[0]);
            break;
        case 27: // In <TheRules> Recognized '^{Ident}',	Shortest string "^A"
return (int)Token.anchoredSymbol;
            break;
        case 28: // In <TheRules> Recognized '\{',	Shortest string "{"
yy_push_state(Action); 
                        braceNestingLevel = 1; 
                        return (int)'{';
            break;
        case 29: // In <TheRules> Recognized '{LitChr}',	Shortest string "'\x01'"
return (int)Token.litchar;
            break;
        case 30: // In <TheRules> Recognized '^%%',	Shortest string "^%%"
yy_clear_stack();
                        BEGIN(TheEpilog); 
                        yy_push_state(ShouldBeBlank); errStart = null;
                        return (int)Token.kwPCPC;
            break;
        case 31: // In <TheRules> Recognized '\%{Ident}',	Shortest string "%A"
return (int)GetKeyword(yytext);
            break;
        case 32: // In <TheRules> Recognized '{LitStr}',	Shortest string "\"\""
return (int)Token.litstring;
            break;
        case 34: // In <TheRules> Recognized '{Ident}',	Shortest string "A"
return (int)Token.ident;
            break;
        case 35: // In <TheEpilog> Recognized '.',	Shortest string "\x01"
        case 36: // In <TheEpilog> Recognized '.',	Shortest string "\""
        case 37: // In <TheEpilog> Recognized '.',	Shortest string "%"
        case 38: // In <TheEpilog> Recognized '.',	Shortest string "/"
        case 58: // In <Prolog> Recognized '.',	Shortest string "^%"
yy_push_state(CodeBlock); yyless(0); return (int)Token.codeStart;
            break;
        case 39: // In <TheEpilog> Recognized '{CmntStrt}',	Shortest string "/*"
yy_push_state(CodeBlock); 
                              yy_push_state(Comment); 
                              comStart = TokenSpan(); 
                              return (int)Token.codeStart;
            break;
        case 40: // In <TheEpilog> Recognized '{OneLineCmnt}',	Shortest string "//"
yy_push_state(CodeBlock);  
                              return (int)Token.codeStart;
            break;
        case 41: // In <GetPath> Recognized '{NotWh}+',	Shortest string "\x01"
        case 44: // In <GetPath> Recognized '{NotWh}+',	Shortest string "\""
        case 45: // In <GetPath> Recognized '{NotWh}+',	Shortest string "/"
        case 47: // In <GetPath> Recognized '{NotWh}+',	Shortest string "@"
        case 48: // In <GetPath> Recognized '{NotWh}+',	Shortest string "@\""
        case 50: // In <GetPath> Recognized '{NotWh}+',	Shortest string "@\"\\"
        case 56: // In <GetPath> Recognized '{NotWh}+',	Shortest string "\"\\"
return (int)Token.filePath;
            break;
        case 42: // In <GetPath> Recognized '{Eol}',	Shortest string "\n"
        case 43: // In <GetPath> Recognized '{Eol}',	Shortest string "\r"
BEGIN(0);
            break;
        case 46: // In <GetPath> Recognized '={NotWh}*',	Shortest string "="
yyless(1); return (int)'=';
            break;
        case 49: // In <GetPath> Recognized '{VrbStr}',	Shortest string "@\"\""
        case 51: // In <GetPath> Recognized '{VrbStr}',	Shortest string "@\"\\\""
        case 52: // In <GetPath> Recognized '{VrbStr}',	Shortest string "@\"\t\""
        case 53: // In <GetPath> Recognized '{VrbStr}',	Shortest string "@\"\t\\\""
return (int)Token.verbatim;
            break;
        case 55: // In <GetPath> Recognized '{LitStr}',	Shortest string "\"\""
        case 57: // In <GetPath> Recognized '{LitStr}',	Shortest string "\"\x20\""
return (int)Token.litstring;
            break;
        case 59: // In <Prolog> Recognized '^%\}',	Shortest string "^%}"
if (braceNestingLevel != 0) {
                                  Error(55, TokenSpan()); braceNestingLevel = 0;
                              }
                              else {
                                  yy_pop_state(); return (int)Token.kwRbrace; 
                              }
            break;
        case 60: // In <Action> Recognized '\}',	Shortest string "}"
yy_pop_state(); return (int)'}';
            break;
        case 61: // In <Comment> Recognized '{ABStar}',	Shortest string ""
        case 62: // In <Comment> Recognized '{ABStar}',	Shortest string "\x01"
        case 63: // In <Comment> Recognized '{ABStar}',	Shortest string "\""
        case 64: // In <Comment> Recognized '{ABStar}',	Shortest string "%"
        case 65: // In <Comment> Recognized '\*',	Shortest string "*"
        case 67: // In <Comment> Recognized '{ABStar}',	Shortest string "\"\\"
/* skip */
            break;
        case 66: // In <Comment> Recognized '{CmntEnd}',	Shortest string "*/"
yy_pop_state();
                         // If comment has obscured one or more EOL then ...  
                         if (YY_START == ShouldBeBlank) {
                             if (errStart != null) {
                                 Error(54, errStart.Merge(errEnd));
                                 errStart = null;
                             } else if (lNum > comStart.startLine) 
                                 yy_pop_state();
                         }
                         /* And no token returned */
            break;
        case 68: // In <CodeBlock> Recognized '{CodeSkip}+',	Shortest string "\x01"
        case 70: // In <CodeBlock> Recognized '\%',	Shortest string "^%"
        case 71: // In <CodeBlock> Recognized '{CodeSkip}+',	Shortest string "'"
        case 72: // In <CodeBlock> Recognized '\/',	Shortest string "/"
        case 73: // In <CodeBlock> Recognized '@',	Shortest string "@"
        case 76: // In <CodeBlock> Recognized '{VrbStr}',	Shortest string "\"\""
        case 77: // In <CodeBlock> Recognized '{VrbStr}',	Shortest string "@\"\\\""
        case 78: // In <CodeBlock> Recognized '{CodeSkip}+',	Shortest string "'\\"
        case 81: // In <CodeBlock> Recognized '\%',	Shortest string "%"
/* skip */
            break;
        case 69: // In <CodeBlock> Recognized '{BadStr}',	Shortest string "\""
Error(58, TokenSpan());
            break;
        case 74: // In <CodeBlock> Recognized '\{',	Shortest string "{"
braceNestingLevel++;
            break;
        case 75: // In <CodeBlock> Recognized '\}',	Shortest string "}"
if (braceNestingLevel == 0 && 
                                       yy_top_state() == Action) {
                                  yy_pop_state();
                                  yyless(0);
                                  return (int)Token.codeEnd;
                              }
                              else
                                  braceNestingLevel--;
            break;
        case 79: // In <CodeBlock> Recognized '^%%',	Shortest string "^%%"
for ( ; ; ) {
                                  yy_pop_state();
                                  switch (YY_START)
                                  {
                                    case INITIAL: 
                                        BEGIN(TheRules);
                                        Error(60, TokenSpan()); 
                                        return (int)Token.kwPCPC;
                                    case TheRules: 
                                        BEGIN(TheEpilog);
                                        Error(60, TokenSpan()); 
                                        return (int)Token.kwPCPC;
                                    default: break; 
                                  }
                              }
            break;
        case 80: // In <CodeBlock> Recognized '^%\}',	Shortest string "^%}"
if (yy_top_state() != Prolog) {
                                  Error(56, TokenSpan()); yy_clear_stack(); BEGIN(Prolog);
                              } else if (braceNestingLevel != 0) {
                                  Error(55, TokenSpan());
                              } else {
                                  yy_pop_state();
                              } 
                              yyless(0); return (int)Token.codeEnd;
            break;
        case 82: // In <ShouldBeBlank> Recognized '{NotWh}',	Shortest string "\x01"
        case 85: // In <ShouldBeBlank> Recognized '{NotWh}',	Shortest string "\""
        case 86: // In <ShouldBeBlank> Recognized '{NotWh}',	Shortest string "%"
        case 87: // In <ShouldBeBlank> Recognized '{NotWh}',	Shortest string "/"
{
                                LexSpan cSpan = TokenSpan(); /* Only white space goes here */
                                errEnd = cSpan;
                                if (errStart == null) errStart = cSpan;
                              }
            break;
        case 83: // In <ShouldBeBlank> Recognized '{Eol}',	Shortest string "\n"
        case 84: // In <ShouldBeBlank> Recognized '{Eol}',	Shortest string "\r"
if (errStart != null)
                                  Error(54, errStart.Merge(errEnd)); 
                              yy_pop_state();
            break;
        default:
            break;
    }
#pragma warning restore 162
#endregion
                    }
                }
            } // end try
            finally {
// User-specified epilog to scan()
yylloc = new LexSpan(tokLin, tokCol, tokELin, tokECol, tokPos, tokEPos, buffer);
// End, user-specified epilog
            } // end finally
        }

#if BACKUP
        Result Recurse2(ref Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, code) != goStart AND
            //         NextState(state, code) is not an accept state.
            //
            SaveStateAndPos(ref ctx);
            state = next;
            GetCode();

            while ((next = NextState()) > eofNum)
            {
                if (state <= maxAccept && next > maxAccept) // need to update backup data
                    SaveStateAndPos(ref ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetCode(); 
            }
            return (state <= maxAccept ? Result.accept : Result.noMatch);
        }

        void SaveStateAndPos(ref Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx)
        {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }

#endif // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
#region UserCodeSection

/* User Code is all in LexHelper.cs */

#endregion
    } // end class $Scanner


} // end namespace
